var relearn_searchindex = [
  {
    "breadcrumb": "Mathematics and Programming",
    "content": "This section wil cover posts about computer science, programming and devops.",
    "description": "This section wil cover posts about computer science, programming and devops.",
    "tags": [],
    "title": "Computer Science",
    "uri": "/computer-science/index.html"
  },
  {
    "breadcrumb": "Mathematics and Programming",
    "content": "This section wil cover posts about mathematics; I love logic, set-theory, combinatorics, optimization.",
    "description": "This section wil cover posts about mathematics; I love logic, set-theory, combinatorics, optimization.",
    "tags": [],
    "title": "Mathematics",
    "uri": "/mathematics/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Under construction Disclaimer Info © [https://github.com/workx247]. This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. THE CONTENT IS PROVIDED “AS IS,” WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. SEE THE LICENSE FOR THE FULL DISCLAIMER.\nWarning I don’t take responsibility of any form, neither legally nor financially, for using or downloading any software, algorithms and thoughts mentioned in this article. I don’t even claim correctness of fitness for a particular purpose.\nThis is going to be a blog about mathematics, programming and CS.\nFor most people these fields are losely connected - 10 yerars ago I perceived them as very different.\nXKCD summed up my own perception pretty well in this comic.\nToday I still find that comic amusing, but at the same time extremely annoying in daily life, because we, different people with different, partially academic, background, could learn so much from each other, without harping on clichés.\nI can give two examples from my daily experience - one for each ‘direction’.\nThe maths haters claims: Example claim 1: “Math has not application in everyday IT life” How would you make sure that a seires of database rows with an integer colum is ‘gapless’, not necessarily in its correct order?\nOne guy, a practitioner I highly respect, was inclined to sort the rows and iteratively check for each row if the next row had a columen-value of “plus one from the previous” one. That is correct, but all you need is minimum, maximum, the difference, and the knowledge that the count just needs to be equal to “maximum - minimum + 1”. This is not smarty smurf, this is relevant because you save sorting and iterating.\nExample claim 2: “Advanced stuff like, e.g. integrals, have no use in everyday life” Well, maybe not everyday, but as soon as you get older and start having your first back pain, your doc might send you to the rediologist, and that guy read pictures that are computed\nThis way: https://en.wikipedia.org/wiki/Radon_transform and/or this way: https://en.wikipedia.org/wiki/Kaczmarz_method So, living in constant pain, of having a foundation pro/contra some invasive surgery is something that got heavily mitigated through numerical analsis.\nIn other words, you are just a few decades and one lift of a heavy child away from enjoying Newtons and Leibniz’ work on integrals.\nThe ivory tower’s inhabitants An example: Mere programmers can’t help me with my simulation - they lack theoretical background to contribute I once knew a very talented mechanical engineer, who pursued a very theoretic topic that involved signal analysis.\nIn a certain period when he write his master thesis, I saw that guy lingering aroung at the coffee machine because his simulation was ’taking its time to run’. His processing involved repeaded calculation of a subset of the digital signal, a ‘running window’ function; I don’t want to tig too deep here, but the whole signal had a few mega samples, and he repetedly summed up a few thousand of these, thus retrieved some intermediate value, moved on one sample ’to the right’ and then computed the same type of sum again.\nTo a programmer it is obvious that two beginner mistakes have been made:\nAn accumulator variable could be used to store the sum, and as the window moves one sample, we just subtract the value that ’leaves’ our windows, and add the ’new’ value that joins our window. I didn’t mention he was using floats, but because any recorded signal usually originates from some sort of ADC values, there is not real necessity to use floats, and as soon as you use integers, you could stop worrying about any type of numerical rounding errors. So, the ivory tower I’m aiming at here is not the fact that these ‘programmers tricks’ are unknown to a student with theoretical background, but the mere assumption that the coffee machine was the best place to wait for the poor cpu instead of asking the not-so-academic colleagues from the software (i.e. programming) department.\nThe generic mistake: working alone for too long, assuming no one can understand / help you I knew a few very smart people at the university. While it is indeed true that many people were not able to follow what they were working on, it is completely wrong (working a job at a company) to keep your knowledge and work to yourself.\nWhile this is often not directly penalized in academia, it is still tragic in some cases. This is just one individual posting his/her concerns, it still shows the troubles people experience at the university:\nhttps://www.reddit.com/r/PhD/comments/156owmj/has_anyone_quit_their_phd_after_5_years/\nWhile I never tried reaching a PhD, I can stil relate to these people, and that feeling is the main reason why I enjoy practical (falsifiable) work, in a team - best case: together with other friends.",
    "description": "Under construction Disclaimer Info © [https://github.com/workx247]. This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. THE CONTENT IS PROVIDED “AS IS,” WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. SEE THE LICENSE FOR THE FULL DISCLAIMER.\nWarning I don’t take responsibility of any form, neither legally nor financially, for using or downloading any software, algorithms and thoughts mentioned in this article. I don’t even claim correctness of fitness for a particular purpose.",
    "tags": [],
    "title": "Mathematics and Programming",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "Mathematics and Programming \u003e Mathematics",
    "content": "Warning Article still under construction\nHow did I get here? Some 20 years ago, when I was an undergraduate (CS) student, I was pretty fond of theoretical computer science, but I also secretly joined fellow students in their math classes, which kind of pissed of my dad, but also lead me to pursue mathematics later (bachelors degree only…)\nDuring that time I usually earned some extra money as a tutor for both theoretical CS and also mathematics.\nBack then I often observed that both students, but also teachers, struggled to explain the technique of the diagonal argument in a general sense. So, usually, most of the studends were able to grasp the individual applications of the technique, Cantors uncountability proof for \\(\\mathbb{R}_{[0,1]}\\), or the power set theorem referring to \\(|\\mathcal{P}(S)| \u003e |S|\\) - or the halting problem - depending on the field of study of the respective student/teacher.\nCantors diagonal arguemt for the uncoutability of \\(\\mathbb{R}_{[0,1]}\\), Cantors theorem regarding the cardinality of power sets, The halting problem Warning I don’t take responsibility of any form, neither legally nor financially, for using or downloading any software, algorithms and thoughts mentioned in this article. I don’t even claim correctness of fitness for a particular purpose.\nTL;DR What I would like to show here on a more formal level, is what the diagonal argument actually is, and how to use it in its ‘usual’, or contrapositional form.\nThe Diagonal Argument Given a function \\(f: I \\rightarrow S\\), a function \\(P: I \\times S \\rightarrow T \\), which is more like a property, i.e. \\(|T| \\geq 2\\) is the only necessary condition for \\(P\\). The following holds\n\\begin{align} \\exists s^* \\in S\\ \\forall i \\in I: P(i, f(i)) \\neq P(i, s^*) \\implies f\\ \\text{is not surjective.} \\end{align} It might look much more complicated than it actually is. If $f$ is surjective, then $S = f(I)$, and because of $s \\in S$ some index $i^*$ would yield $f(i^*) = s^*$, thus $P(i^*, f(i^*)) = P(i^*, s^*)$. If you look at the diagonal argument like this, it is almost trivial.\nThe equivalent, contrapositional form is:\n\\begin{align} \\text{If } f \\text{ is surjective, then }\\quad \\not\\exists s^* \\in S\\ \\forall i \\in I: P(i, f(i)) \\neq P(i, s). \\end{align} We could formally negate the implication (for all \\(s^*\\) exists an \\(i\\) sich that …) - but that is not the way the diagonal argument is usually applied.\nThe two forms which I am aware of are:\nThe direct form - the goal is to prove that no surjective \\(f\\) exists.\nYou are able to construct that special element \\(s^*\\) which is not in the image of \\(f\\) by exploiting the inner structure of the set \\(S\\) and the property \\(P\\) - the P-in-equality usually provides the means to do so.\nThe contrapositional form - the goal is to contradict some construction for \\(s^*\\):\nYou already know, by some theorem that a surjective \\(f\\) exists. A construction of \\(s^*\\) then involves several steps that are proven to be legitimate and one step which is, by assumption \\(A\\), legal/existent. By showing that \\(\\forall i \\in I: P(i, f(i)) \\neq P(i, s^*)\\) for the constructed/hypthetical \\(s^*\\), you have contradicted \\(f\\) being surjective and thus proven the construction to be invalid, and thus assumption \\(A\\) to be wrong.\nThe restriction that in the constructino of \\(s^*\\) only one assumption \\(A\\) is made is crucial. If several steps in the construction of \\(s^*\\) are questionable, your proven result is weak in the sense that your proof doesn’t show anymore, precisely, which step in the construction fails. Fun fact: As in any theorem we might use it to falsify any aspect if it by just making clear that every other aspect of our proof / construction is valid. It might be thinkable to use the diagonal argument to prove that \\(|T| = 1\\), but I can’t think of an application like that. If you are aware of such an example, please let me know (but please give me some relevant citation, not an artificially one made up).\nThe classic examples of how to apply the diagonal argument Cantors uncountability proof for \\(\\mathbb{R}_{[0,1]}\\) We want to prove that the set of real numbers in the interval \\([0,1]\\) is uncountable, that is any enumration of the real numbers in the interval \\([0,1]\\) is not surjective.\nSuppose we got an arbitrary surjective enumertion $f: \\mathbb{N} \\rightarrow [0,1]^N $\nFor the reader, we relate to the symbols used in the diagonal theorem above:\n\\(I \\equiv \\mathbb{N}\\) \\(S \\equiv [0,1]^N\\) \\(T \\equiv \\{0,1\\}\\) We call the elements “$r$” instead of “$s$”, like $r \\in [0,1]^N$. We will later explain why $[0,1]^N$ could be viewed as a subset of $\\mathbb{R}_{[0,1]}$. If it is impossible to enumerate that subset, we have $|\\mathbb{N}| \u003c |[0,1]^N| \\leq |\\mathbb{R}_{[0,1]}|$. (**) The property \\(P\\) is defined by the i-th component of an element $r$.\n\\begin{align} P(i, r) = r_i\\begin{cases} 1\\\\ 0 \\end{cases} \\end{align} We see now, because $P$ is two-valued, we can always define a different i-th component for $r^*$ and thus construct a 0-1-sequence, i.e. $r^* \\in [0,1]^N$, that differs from $P(i,f(i))$ for all indexes i.\n\\begin{align} P(i,f(i)) = r_i = 1 :\\iff r^*_i = 0\\\\ P(i,f(i)) = r_i = 0 :\\iff r^*_i = 1\\\\ \\end{align} The diagonal argument then yields that $f$ is not surjective, $f(\\mathbb{N}) \\subsetneq [0,1]^N$. Because $f$ was arbitrary, we have shown that $N \u003c [0,1]^N \\leq \\mathbb{R}_{[0,1]}$\nWhile a continued fraction like $0,111111... = 1$ in binary, it is not in decimal representation. Viewing that sequence as a decimal representation (leaving aside all other digits from 2 to 9, we have an injective embedding of $[0,1]^N \\rightarrow \\mathbb{R}_{[0,1]}$ (thank you wikipedia) which finally yields the second inequality $N \u003c [0,1]^N \\leq \\mathbb{R}_{[0,1]}$, so $N \u003c \\mathbb{R}_{[0,1]}$ $\\blacksquare$",
    "description": "Warning Article still under construction\nHow did I get here? Some 20 years ago, when I was an undergraduate (CS) student, I was pretty fond of theoretical computer science, but I also secretly joined fellow students in their math classes, which kind of pissed of my dad, but also lead me to pursue mathematics later (bachelors degree only…)\nDuring that time I usually earned some extra money as a tutor for both theoretical CS and also mathematics.",
    "tags": [],
    "title": "The Diagonalization Argument",
    "uri": "/mathematics/diagonalization_argument/index.html"
  },
  {
    "breadcrumb": "Mathematics and Programming \u003e Computer Science",
    "content": "About The Golang community is rather conservative, most smaller projects just get along with go build, some larger projects including Kubernetes, Prometheus, Terraform and Vault stick with the good old Makefile. But, that being said, a new player gets some attention, Mage and I would like to introduce it here and give some reasons why I like it. I also try to be fair and give some pros and cons for both Mage and Make tools, as I’m generally no fan of black-and-white pictures - but the article deals with Mage. What we show here is:\nRun a minimal Mage example; show how to install and run the necessary tools. Debug that example using the delve debugger. Try to refute common arguments against checking in executables, although I share some scepticism about that myself. Disclaimer Warning I don’t take responsibility of any form, neither legally nor financially, for using or downloading any software, algorithms and thoughts mentioned in this article. I don’t even claim correctness of fitness for a particular purpose.\nTL;DR GNU Make Is a battle tested tool, e.g.: the Linux kernel is built with it, it is still common today to use Make with C, C++, LaTeX and generally in the DevOps and scientific computing context. Many people know how to use it; if a new member joins ’the team’, chances are much higher her/him has heard of Make than of Mage. It comes with a lot of infrastructure in and around it: Implicit rules specifically for the C language. The Autotools chain. There is a lot of (inviting) freedom to use shell, perl etc. within the targets recipes, which could be cool, but also can turn out to be nuisance. Mage Although not as standard as Make, big projects such as Hugo and Beats already adopted it. It is ’easy’ to debug a makefile, compared to Make (SO post ’tool for debugging makefiles’) - but that perception of ’easy’ might be subjective / just my view. The freedom to use any Bash-/Perl-/Linux-tool in a Make recipe imho comes at a cost. I prefer to have a typed programming language with compile time checks and a debugger at hand. This is an advantage for Go programmers, and a minus for non-Go-programmers - the ‘common’ Make recipe line relies on bash or sh, which are a very common tools. Imho the ‘compile time checks’ need some extra mentioning: it is actually a whole toolchain we get for free; linters (SonarLint), pretty printers (go fmt), unit test etc. All of this is inherently difficult to achieve with the syntactic freedom of makefiles. The idea to be able to generate a self-sufficient build executable without any dependencies appeals to me. I know the fraction of programmers who strictly refuse to check in any binaries into a repo, but with the aid of some signing and comparably small executables these are concerns which have, in my opinion, less impact today. Outside of FOSS / inside companies, it is not that uncommon to even check-in whole compiler suites just with the goal in mind to have 100% binary reproducible builds and be completely independent of any changes happening in the www. Git LFS also lowers the performance cost of doing so. You might already feel that there are some philosophical aspects lingering around here - but I guess that is no surprise when diving into a debate that basically falls into the ‘old-vs-new’ category; again - I’m not arguing globally towards new tools per se, just trying to highlight what makes Mage appealing to me.\nWalkthrough Example In this article we would like to write a small ‘magefile’, compile and debug it - and ssh-sign the final executable.\nPrerequisites At first I have to confess that I don’t know much about Windows - so this whole article was written using a Linux OS. I’m not saying Windows is a bad thing, and I guess that whole procedure could be done on a Windows OS as well, but I don’t own a Windows installation, and, although I have to use Windows at my job, this blog is entirely a spare-/fun-time-thing for me to do…\nI guess it is fully sufficient to use your favourite linux package manager and install a newer version of Golang. The official Golang installation instructions recommend removing stuf in /usr/local/go… that might be feasible, but I won’t recommend removing anything in my blog. The version I used was (thank you Manjaro-Team and pacman):\n$ go version go version go1.23.1 linux/amd64 Please make sure that ~/go/bin is part of your users PATH variable, because the tools we are about to install will reside there; You could use mkdir -p ~/go/bin and echo 'export PATH=$PATH:~/go/bin' \u003e\u003e ~/.bashrc to achieve that (probable also source ~/.bashrc).\nThe following snippets are partly taken from magefile.org. We create a build directory for Mage, i.e. ~/mage, and clone the official mage repo into it:\n$ cd \u0026\u0026 pwd /home/username $ mkdir mage $ cd mage $ git clone https://github.com/magefile/mage . The following will compile Mage and add a binary called ‘mage’ into ~/go/bin\n# inside ~/mage we run to compile and install the mage executable under ~/go/bin: $ go run bootstrap.go # because ~/go/bin/ is part of my PATH variable we can call mage directly: $ which mage /home/username/go/bin/mage $ mage --version # your version build number might differ of course Mage Build Tool v1.15.0-5-g2385abb Build Date: 2024-10-22T14:28:02+02:00 Commit: 2385abb built with: go1.23.1 Later in this tutorial we will need the delve debugger - possibly also an IDE to squeeze the last drop of fanciness out of this article, but I’ll keep that part optional.\nTaken from https://github.com/go-delve/delve/tree/master/Documentation/installation:\n$ cd \u0026\u0026 pwd /home/username $ mkdir delve \u0026\u0026 cd delve $ git clone https://github.com/go-delve/delve . # we then run go install to compile and install the dlv executable under ~/go/bin: $ go install github.com/go-delve/delve/cmd/dlv $ which dlv /home/username/go/bin/dlv $ dlv version # your version build number might differ of course Delve Debugger Version: 1.23.1 Build: $Id: 2eba762d75437d380e48fc42213853f13aa2904d Now we are ready for…\nWriting Our First Magefile $ cd \u0026\u0026 pwd /home/username $ mkdir hello-mage $ cd hello-mage $ go mod init hello-mage $ touch magefile.go $ ls -lh total 8.0K -rw-r--r-- 1 peterpan peterpan 29 Oct 28 13:22 go.mod -rw-r--r-- 1 peterpan peterpan 574 Oct 22 15:14 magefile.go We then grab our favourite editor and fill magefile.go with some content:",
    "description": "About The Golang community is rather conservative, most smaller projects just get along with go build, some larger projects including Kubernetes, Prometheus, Terraform and Vault stick with the good old Makefile. But, that being said, a new player gets some attention, Mage and I would like to introduce it here and give some reasons why I like it. I also try to be fair and give some pros and cons for both Mage and Make tools, as I’m generally no fan of black-and-white pictures - but the article deals with Mage. What we show here is:",
    "tags": [],
    "title": "Mage",
    "uri": "/computer-science/mage/index.html"
  },
  {
    "breadcrumb": "Mathematics and Programming",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "Mathematics and Programming",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
